// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecastAPI.Persistence;

#nullable disable

namespace WeatherForecastAPI.Migrations
{
    [DbContext(typeof(WeatherForecastDbContext))]
    [Migration("20231009040534_SeedCitiesMigration")]
    partial class SeedCitiesMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecastAPI.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "RS",
                            CreatedDate = new DateTime(2023, 10, 9, 4, 5, 34, 201, DateTimeKind.Utc).AddTicks(5321),
                            Latitude = 45.2551338m,
                            Longitude = 19.8451756m,
                            ModifiedDate = new DateTime(2023, 10, 9, 4, 5, 34, 201, DateTimeKind.Utc).AddTicks(5321),
                            Name = "Novi Sad",
                            ZipCode = "21000"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "RS",
                            CreatedDate = new DateTime(2023, 10, 9, 4, 5, 34, 371, DateTimeKind.Utc).AddTicks(8795),
                            Latitude = 44.2708719m,
                            Longitude = 19.8863297m,
                            ModifiedDate = new DateTime(2023, 10, 9, 4, 5, 34, 371, DateTimeKind.Utc).AddTicks(8795),
                            Name = "Valjevo",
                            ZipCode = "14000"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "RS",
                            CreatedDate = new DateTime(2023, 10, 9, 4, 5, 34, 467, DateTimeKind.Utc).AddTicks(5903),
                            Latitude = 45.7727397m,
                            Longitude = 19.1147036m,
                            ModifiedDate = new DateTime(2023, 10, 9, 4, 5, 34, 467, DateTimeKind.Utc).AddTicks(5903),
                            Name = "Sombor",
                            ZipCode = "25000"
                        });
                });

            modelBuilder.Entity("WeatherForecastAPI.Model.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ForecastTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool>("UpToDate")
                        .HasColumnType("bit");

                    b.Property<int>("UtcOffset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecastAPI.Model.WeatherForecast", b =>
                {
                    b.HasOne("WeatherForecastAPI.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
